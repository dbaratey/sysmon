// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sysmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SysmonAgentClient is the client API for SysmonAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysmonAgentClient interface {
	GetStats(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (SysmonAgent_GetStatsClient, error)
}

type sysmonAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewSysmonAgentClient(cc grpc.ClientConnInterface) SysmonAgentClient {
	return &sysmonAgentClient{cc}
}

func (c *sysmonAgentClient) GetStats(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (SysmonAgent_GetStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SysmonAgent_serviceDesc.Streams[0], "/sysmon.SysmonAgent/GetStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &sysmonAgentGetStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SysmonAgent_GetStatsClient interface {
	Recv() (*SysMonInfo, error)
	grpc.ClientStream
}

type sysmonAgentGetStatsClient struct {
	grpc.ClientStream
}

func (x *sysmonAgentGetStatsClient) Recv() (*SysMonInfo, error) {
	m := new(SysMonInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SysmonAgentServer is the server API for SysmonAgent service.
// All implementations must embed UnimplementedSysmonAgentServer
// for forward compatibility
type SysmonAgentServer interface {
	GetStats(*NullReq, SysmonAgent_GetStatsServer) error
	mustEmbedUnimplementedSysmonAgentServer()
}

// UnimplementedSysmonAgentServer must be embedded to have forward compatible implementations.
type UnimplementedSysmonAgentServer struct {
}

func (UnimplementedSysmonAgentServer) GetStats(*NullReq, SysmonAgent_GetStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedSysmonAgentServer) mustEmbedUnimplementedSysmonAgentServer() {}

// UnsafeSysmonAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysmonAgentServer will
// result in compilation errors.
type UnsafeSysmonAgentServer interface {
	mustEmbedUnimplementedSysmonAgentServer()
}

func RegisterSysmonAgentServer(s *grpc.Server, srv SysmonAgentServer) {
	s.RegisterService(&_SysmonAgent_serviceDesc, srv)
}

func _SysmonAgent_GetStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NullReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysmonAgentServer).GetStats(m, &sysmonAgentGetStatsServer{stream})
}

type SysmonAgent_GetStatsServer interface {
	Send(*SysMonInfo) error
	grpc.ServerStream
}

type sysmonAgentGetStatsServer struct {
	grpc.ServerStream
}

func (x *sysmonAgentGetStatsServer) Send(m *SysMonInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _SysmonAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sysmon.SysmonAgent",
	HandlerType: (*SysmonAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStats",
			Handler:       _SysmonAgent_GetStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sysmon.proto",
}
